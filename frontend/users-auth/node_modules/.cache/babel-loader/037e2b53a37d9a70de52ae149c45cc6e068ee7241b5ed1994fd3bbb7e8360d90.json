{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nconst username = localStorage.getItem('username');\nexport const fetchData = createAsyncThunk('boards/fetchData', async () => {\n  //console.log(username)\n  const response = await axios.post('http://localhost:3001/account', {\n    username\n  });\n  return response.data;\n});\nexport const updateData = createAsyncThunk('boards/updateData', async boards => {\n  try {\n    console.log(\"Update =>\", boards);\n    const response = await axios.put('http://localhost:3001/account', {\n      username,\n      boards\n    });\n    console.log(response);\n    return response.data.boards;\n  } catch (error) {}\n});\nexport const createBoard = createAsyncThunk('boards/createBoard', async (name, newColumns) => {\n  try {\n    const columns = newColumns;\n    const response = await axios.post('http://localhost:3001/test', {\n      username,\n      name,\n      columns\n    });\n  } catch (error) {\n    console.log(error);\n  }\n});\nconst boardsSlice = createSlice({\n  name: \"boards\",\n  initialState: {\n    boards: []\n  },\n  reducers: {\n    addBoard: (state, action) => {\n      const isActive = state.boards.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: []\n      };\n      board.columns = payload.newColumns;\n      state.boards.push(board);\n    },\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.boards.find(board => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    deleteBoard: state => {\n      const board = state.boards.find(board => board.isActive);\n      state.boards.splice(state.boards.indexOf(board), 1);\n    },\n    setBoardActive: (state, action) => {\n      state.boards.map((board, index) => {\n        index === action.payload.index ? board.isActive = true : board.isActive = false;\n        return board;\n      });\n    },\n    addTask: (state, action) => {\n      const {\n        title,\n        status,\n        color,\n        description,\n        subtasks,\n        newColIndex\n      } = action.payload;\n      const task = {\n        title,\n        description,\n        color,\n        subtasks,\n        status\n      };\n      const board = state.boards.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        color,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.boards.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.color = color;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    dragTask: (state, action) => {\n      const {\n        colIndex,\n        prevColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.boards.find(board => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.boards.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.boards.find(board => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.boards.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchData.fulfilled, (state, action) => {\n      state.boards = action.payload;\n    }).addCase(updateData.fulfilled, (state, action) => {\n      state.boards = action.payload;\n    });\n  }\n});\nexport default boardsSlice;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","username","localStorage","getItem","fetchData","response","post","data","updateData","boards","console","log","put","error","createBoard","name","newColumns","columns","boardsSlice","initialState","reducers","addBoard","state","action","isActive","length","payload","board","push","editBoard","find","deleteBoard","splice","indexOf","setBoardActive","map","index","addTask","title","status","color","description","subtasks","newColIndex","task","column","col","tasks","editTask","prevColIndex","taskIndex","filter","newCol","dragTask","colIndex","prevCol","i","setSubtaskCompleted","subtask","isCompleted","setTaskStatus","deleteTask","extraReducers","builder","addCase","fulfilled"],"sources":["C:/AUTH0.8/frontend/users-auth/src/redux/boardsSlice.js"],"sourcesContent":["import { createSlice , createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\n\nconst username = localStorage.getItem('username')\n\nexport const fetchData = createAsyncThunk('boards/fetchData', async () => {\n\n  //console.log(username)\n  const response = await axios.post('http://localhost:3001/account',{username});\n  return response.data;\n\n});\n\nexport const updateData = createAsyncThunk('boards/updateData', async (boards) => {\n\n  try{\n\n    console.log(\"Update =>\",boards)\n    const response = await axios.put('http://localhost:3001/account',{username,boards})\n    console.log(response)\n    return response.data.boards;\n\n  }catch(error){\n\n  }\n  \n})\n\nexport const createBoard = createAsyncThunk('boards/createBoard', async (name,newColumns) => {\n\n  try{\n\n    const columns = newColumns\n    const response = await axios.post('http://localhost:3001/test',{username,name,columns})\n    \n  }catch(error){\n    console.log(error)\n  }\n  \n})\n\n\n\nconst boardsSlice = createSlice({\n  name: \"boards\",\n  initialState: {\n    boards:[]\n  },\n  reducers: {\n    addBoard: (state, action) => {\n      const isActive = state.boards.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: [],\n      };\n      board.columns = payload.newColumns;\n      state.boards.push(board);\n    },\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.boards.find((board) => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    deleteBoard: (state) => {\n      const board = state.boards.find((board) => board.isActive);\n      state.boards.splice(state.boards.indexOf(board), 1);\n    },\n    setBoardActive: (state, action) => {\n      state.boards.map((board, index) => {\n        index === action.payload.index\n          ? (board.isActive = true)\n          : (board.isActive = false);\n        return board;\n      });\n    },\n    addTask: (state, action) => {\n      const { title, status, color, description, subtasks, newColIndex } =\n        action.payload;\n      const task = { title, description,color, subtasks, status };\n      const board = state.boards.find((board) => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        color,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex,\n      } = action.payload;\n      const board = state.boards.find((board) => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.color = color;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    dragTask: (state, action) => {\n      const { colIndex, prevColIndex, taskIndex } = action.payload;\n      const board = state.boards.find((board) => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.boards.find((board) => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.boards.find((board) => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.boards.find((board) => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchData.fulfilled, (state, action) => {\n        state.boards = action.payload;\n      })\n      .addCase(updateData.fulfilled, (state,action) =>{\n        state.boards = action.payload\n      })\n  },\n});\n\nexport default boardsSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}