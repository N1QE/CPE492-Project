{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTH0.6\\\\frontend\\\\users-auth\\\\src\\\\components\\\\Subtask.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport boardsSlice from \"../redux/boardsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Subtask({\n  index,\n  taskIndex,\n  colIndex\n}) {\n  _s();\n  const dispatch = useDispatch();\n  const boards = useSelector(state => {\n    return state.boards.boards;\n  });\n  const board = boards && boards.find(board => board.isActive === true);\n  const col = board.columns.find((col, i) => i === colIndex);\n  const task = col.tasks.find((task, i) => i === taskIndex);\n  const subtask = task.subtasks.find((subtask, i) => i === index);\n  const checked = subtask.isCompleted;\n  const onChange = e => {\n    dispatch(boardsSlice.actions.setSubtaskCompleted({\n      index,\n      taskIndex,\n      colIndex\n    }) //ชื่อslice.property slice.ชื่อ action\n    );\n    //const updateTask = { title, description, subtasks, status };\n    const updatecolumn = {\n      \"name\": \"\",\n      \"tasks\": []\n    };\n    const updateBoard = {\n      \"name\": \"\",\n      \"isActive\": false,\n      \"columns\": []\n    };\n    updateBoard.name = board.name;\n    const updatedColumn = board.columns && board.columns.find((col, index) => index === newColIndex);\n    let Tasks = updatedColumn.tasks;\n    Tasks = [...Tasks, updateTask];\n    updatecolumn.name = status;\n    updatecolumn.tasks = Tasks;\n    console.log(\"11\", updatecolumn);\n    let i = 0;\n    const Upcol = board.columns && board.columns.map(b => {\n      if (b.name == updatecolumn.name) {\n        b = updatecolumn;\n      }\n\n      //console.log(updatecolumn.name)\n      console.log(\"b=>\", b);\n      i++;\n      console.log(\"I =>\", i);\n      return b;\n    });\n    console.log(\"ppp\", Upcol);\n    console.log(\"bbb\", updateBoard);\n    updateBoard.columns = Upcol;\n    console.log(\"bbb\", updateBoard.columns);\n    const updateBoards = boards.map(b => {\n      if (b.isActive) b = updateBoard;\n      console.log(\"b=>\", b);\n      return b;\n    });\n    console.log('updateBoards => ', updateBoards);\n    //dispatch(updateData(updateBoards));\n\n    /*\n    */\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" w-full flex hover:bg-[#635fc740] dark:hover:bg-[#635fc740] rounded-md relative items-center justify-start dark:bg-[#20212c]  p-3 gap-4  bg-[#f4f7fd]\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \" w-4 h-4  accent-[#635fc7] cursor-pointer \",\n      type: \"checkbox\",\n      checked: checked,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: checked && \" line-through opacity-30 \",\n      children: subtask.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Subtask, \"J0gPoHHtlgq3Z9wUf7/9gMQhGGc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Subtask;\nexport default Subtask;\nvar _c;\n$RefreshReg$(_c, \"Subtask\");","map":{"version":3,"names":["React","useDispatch","useSelector","boardsSlice","jsxDEV","_jsxDEV","Subtask","index","taskIndex","colIndex","_s","dispatch","boards","state","board","find","isActive","col","columns","i","task","tasks","subtask","subtasks","checked","isCompleted","onChange","e","actions","setSubtaskCompleted","updatecolumn","updateBoard","name","updatedColumn","newColIndex","Tasks","updateTask","status","console","log","Upcol","map","b","updateBoards","className","children","type","fileName","_jsxFileName","lineNumber","columnNumber","title","_c","$RefreshReg$"],"sources":["C:/AUTH0.6/frontend/users-auth/src/components/Subtask.js"],"sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport boardsSlice from \"../redux/boardsSlice\";\n\nfunction Subtask({ index, taskIndex, colIndex }) {\n\n  const dispatch = useDispatch();\n  const boards = useSelector((state) => {\n    return state.boards.boards\n  });\n  const board = boards && boards.find((board) => board.isActive === true);\n  const col = board.columns.find((col, i) => i === colIndex);\n  const task = col.tasks.find((task, i) => i === taskIndex);\n  const subtask = task.subtasks.find((subtask, i) => i === index);\n  const checked = subtask.isCompleted;\n\n  const onChange = (e) => {\n    dispatch(\n      boardsSlice.actions.setSubtaskCompleted({ index, taskIndex, colIndex }) //ชื่อslice.property slice.ชื่อ action\n    );\n    //const updateTask = { title, description, subtasks, status };\n      const updatecolumn = {\n        \"name\": \"\",\n        \"tasks\": []\n      };\n      const updateBoard = { \n        \"name\": \"\",\n        \"isActive\" : false,\n        \"columns\": []\n      };\n      updateBoard.name = board.name\n      const updatedColumn = board.columns && board.columns.find((col, index) => index === newColIndex);\n      let Tasks = updatedColumn.tasks\n      Tasks = [ ...Tasks , updateTask];\n      updatecolumn.name = status\n      updatecolumn.tasks = Tasks\n      console.log(\"11\",updatecolumn)\n      let i = 0;\n      \n      const Upcol = board.columns && board.columns.map(b =>{\n        \n        if(b.name == updatecolumn.name){\n          b = updatecolumn\n        }\n        \n        //console.log(updatecolumn.name)\n        console.log(\"b=>\",b)\n        i++\n        console.log(\"I =>\",i)\n        return b\n\n      })\n\n      console.log(\"ppp\",Upcol)\n      console.log(\"bbb\",updateBoard)\n\n      updateBoard.columns = Upcol\n      console.log(\"bbb\",updateBoard.columns)\n\n\n      const updateBoards = boards.map(b => {\n        if(b.isActive) b = updateBoard\n        console.log(\"b=>\",b)\n        return b\n      })\n\n      console.log('updateBoards => ', updateBoards)\n      //dispatch(updateData(updateBoards));\n\n    /*\n    */\n  };\n\n  return (\n    <div className=\" w-full flex hover:bg-[#635fc740] dark:hover:bg-[#635fc740] rounded-md relative items-center justify-start dark:bg-[#20212c]  p-3 gap-4  bg-[#f4f7fd]\">\n      <input\n        className=\" w-4 h-4  accent-[#635fc7] cursor-pointer \"\n        type=\"checkbox\"\n        checked={checked}\n        onChange={onChange}\n      />\n      <p className={checked && \" line-through opacity-30 \"}>\n      {subtask.title}\n      </p>\n    </div>\n  );\n}\n\nexport default Subtask;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}