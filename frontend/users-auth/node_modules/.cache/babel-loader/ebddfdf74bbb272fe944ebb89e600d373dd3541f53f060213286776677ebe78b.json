{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport data from \"../data.json\";\nexport const fetchData = createAsyncThunk('boards/fetchData', async () => {\n  const response = await fetch('http://localhost:3001/account');\n  const data = await response.json();\n  console.log(data.boards);\n  return data.boards;\n});\nconst boardsSlice = createSlice({\n  name: \"boards\",\n  initialState: [{\n    id\n  }],\n  reducers: {\n    addBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: []\n      };\n      board.columns = payload.newColumns;\n      state.push(board);\n    },\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    deleteBoard: state => {\n      const board = state.find(board => board.isActive);\n      state.splice(state.indexOf(board), 1);\n    },\n    setBoardActive: (state, action) => {\n      state.map((board, index) => {\n        index === action.payload.index ? board.isActive = true : board.isActive = false;\n        return board;\n      });\n    },\n    addTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        newColIndex\n      } = action.payload;\n      const task = {\n        title,\n        description,\n        subtasks,\n        status\n      };\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    dragTask: (state, action) => {\n      const {\n        colIndex,\n        prevColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    }\n  },\n  extraReducers: builder => {\n    builder\n    /*.addCase(fetchData.pending, (state) => {\n      state.status = 'loading';\n      state.loading = true;\n    })*/.addCase(fetchData.fulfilled, (state, action) => {\n      state = action.payload;\n      console.log('action', action.payload);\n    });\n    /*.addCase(fetchData.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n      state.loading = false;\n    });*/\n  }\n});\nexport default boardsSlice;","map":{"version":3,"names":["createSlice","createAsyncThunk","data","fetchData","response","fetch","json","console","log","boards","boardsSlice","name","initialState","id","reducers","addBoard","state","action","isActive","length","payload","board","columns","newColumns","push","editBoard","find","deleteBoard","splice","indexOf","setBoardActive","map","index","addTask","title","status","description","subtasks","newColIndex","task","column","col","tasks","editTask","prevColIndex","taskIndex","filter","newCol","dragTask","colIndex","prevCol","i","setSubtaskCompleted","subtask","isCompleted","setTaskStatus","deleteTask","extraReducers","builder","addCase","fulfilled"],"sources":["C:/AUTH0.5/frontend/users-auth/src/redux/boardsSlice.js"],"sourcesContent":["import { createSlice , createAsyncThunk } from \"@reduxjs/toolkit\";\nimport data from \"../data.json\";\n\nexport const fetchData = createAsyncThunk('boards/fetchData', async () => {\n  const response = await fetch('http://localhost:3001/account');\n  const data = await response.json();\n  console.log(data.boards)\n  return data.boards;\n\n});\n\n\n\nconst boardsSlice = createSlice({\n  name: \"boards\",\n  initialState: [{ id}],\n  reducers: {\n    addBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: [],\n      };\n      board.columns = payload.newColumns;\n      state.push(board);\n    },\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    deleteBoard: (state) => {\n      const board = state.find((board) => board.isActive);\n      state.splice(state.indexOf(board), 1);\n    },\n    setBoardActive: (state, action) => {\n      state.map((board, index) => {\n        index === action.payload.index\n          ? (board.isActive = true)\n          : (board.isActive = false);\n        return board;\n      });\n    },\n    addTask: (state, action) => {\n      const { title, status, description, subtasks, newColIndex } =\n        action.payload;\n      const task = { title, description, subtasks, status };\n      const board = state.find((board) => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex,\n      } = action.payload;\n      const board = state.find((board) => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    dragTask: (state, action) => {\n      const { colIndex, prevColIndex, taskIndex } = action.payload;\n      const board = state.find((board) => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      /*.addCase(fetchData.pending, (state) => {\n        state.status = 'loading';\n        state.loading = true;\n      })*/\n      .addCase(fetchData.fulfilled, (state, action) => {\n        \n        state = action.payload;\n        console.log('action',action.payload)\n      })\n      /*.addCase(fetchData.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n        state.loading = false;\n      });*/\n  },\n});\n\nexport default boardsSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}